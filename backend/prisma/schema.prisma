// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js" 
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String           @id @default(uuid())
  email          String           @unique
  phone          String           @unique
  password       String
  firstName      String
  lastName       String
  dob            DateTime
  gender         String
  role           UserRole
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  patientProfile PatientProfile?
  doctorProfile  DoctorProfile?
  hospitalProfile HospitalProfile?
  adminProfile   AdminProfile?
}

enum UserRole {
  USER        // Patient
  DOCTOR      // Doctor
  HOSPITAL    // Hospital
  ADMIN       // Admin
}

enum BloodGroup {
  A_POSITIVE
  A_NEGATIVE
  B_POSITIVE
  B_NEGATIVE
  AB_POSITIVE
  AB_NEGATIVE
  O_POSITIVE
  O_NEGATIVE
}

model PatientProfile {
  userId     String    @id
  user       User      @relation(fields: [userId], references: [id])
  bloodGroup BloodGroup
  address    String
  height     Float
  weight     Float
  allergies  String[] // Can hold multiple or one allergy
  diseases   String[] // Can hold multiple or one disease
}


enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}


model DoctorProfile {
  id               String   @id @default(uuid())
  userId           String   @unique
  specialization   String
  clinicAddress    String
  consultationFee  Int
  status           ApprovalStatus   @default(PENDING)

  startedPracticeOn DateTime
  licenseNumber     String
  licenseIssuedBy   String? // optional
  licenseDocumentUrl String? // optional

  user             User     @relation(fields: [userId], references: [id])
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  DoctorAvailability DoctorAvailability[]
}


model HospitalProfile {
  userId       String         @id
  user         User           @relation(fields: [userId], references: [id])
  hospitalName String
  location     String
  services     String
  status       ApprovalStatus @default(PENDING)
}

model AdminProfile {
  userId String     @id
  user   User       @relation(fields: [userId], references: [id])
  level  AdminRole  @default(SUPER_ADMIN)
  // Add more admin-specific info here
}


enum AdminRole {
  SUPER_ADMIN
  STAFF_ADMIN
  SUPPORT_ADMIN
}

// Appointments

enum DayOfWeek {
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}

model DoctorAvailability {
  id              String   @id @default(uuid())
  doctorId        String
  dayOfWeek       Int      // 0 = Sunday, 1 = Monday, ..., 6 = Saturday
  startTime       String   // Stored in 24-hour format ("09:00", "14:00")
  endTime         String   // Stored in 24-hour format ("10:00", "15:00")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  doctor          DoctorProfile   @relation(fields: [doctorId], references: [id])
}